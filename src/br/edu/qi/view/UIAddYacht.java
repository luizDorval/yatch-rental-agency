/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.qi.view;

import br.edu.qi.model.Yacht;
import br.edu.qi.services.ServicesFactory;
import br.edu.qi.services.YachtServices;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import br.edu.qi.util.Validation;
import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;

/**
 *
 * @author Luiz Dorval
 * @since 05/07/2019
 * @version 1.0.1 beta C56
 */
public class UIAddYacht extends javax.swing.JInternalFrame {

    /**
     * Creates new form UIAddYacht
     */
    public UIAddYacht() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgType = new javax.swing.ButtonGroup();
        jlpData = new javax.swing.JLayeredPane();
        jlModel = new javax.swing.JLabel();
        jlColor = new javax.swing.JLabel();
        jlType = new javax.swing.JLabel();
        jtModel = new javax.swing.JTextField();
        jtColor = new javax.swing.JTextField();
        jrVela = new javax.swing.JRadioButton();
        jrMotor = new javax.swing.JRadioButton();
        jlImo = new javax.swing.JLabel();
        jtImo = new javax.swing.JTextField();
        jtWidth = new javax.swing.JTextField();
        jtMaterial = new javax.swing.JTextField();
        jtHeight = new javax.swing.JTextField();
        jlMaterial = new javax.swing.JLabel();
        jtWeight = new javax.swing.JTextField();
        jlWidth = new javax.swing.JLabel();
        jlHeight = new javax.swing.JLabel();
        jlWeight = new javax.swing.JLabel();
        jlErrorImo = new javax.swing.JLabel();
        jlErrorModel = new javax.swing.JLabel();
        jlErrorColor = new javax.swing.JLabel();
        jlErrorMaterial = new javax.swing.JLabel();
        jlErrorWidth = new javax.swing.JLabel();
        jlErrorHeight = new javax.swing.JLabel();
        jlErrorWeight = new javax.swing.JLabel();
        jlErrorType = new javax.swing.JLabel();
        jlpActions = new javax.swing.JLayeredPane();
        jbRegister = new javax.swing.JButton();
        jbClear = new javax.swing.JButton();
        jlIcon = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);

        jlpData.setBorder(new javax.swing.border.MatteBorder(null));

        jlModel.setText("Modelo");

        jlColor.setText("Cor");

        jlType.setText("Tipo");

        jtModel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtModelFocusLost(evt);
            }
        });
        jtModel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtModelKeyPressed(evt);
            }
        });

        jtColor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtColorFocusLost(evt);
            }
        });
        jtColor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtColorKeyPressed(evt);
            }
        });

        bgType.add(jrVela);
        jrVela.setText("A vela");
        jrVela.setActionCommand("A vela");
        jrVela.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jrVelaKeyPressed(evt);
            }
        });

        bgType.add(jrMotor);
        jrMotor.setText("Motorizado");
        jrMotor.setActionCommand("Motorizado");
        jrMotor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jrMotorFocusLost(evt);
            }
        });
        jrMotor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jrMotorKeyPressed(evt);
            }
        });

        jlImo.setText("IMO");

        jtImo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtImoFocusLost(evt);
            }
        });
        jtImo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtImoKeyPressed(evt);
            }
        });

        jtWidth.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtWidthFocusLost(evt);
            }
        });
        jtWidth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtWidthKeyPressed(evt);
            }
        });

        jtMaterial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtMaterialFocusLost(evt);
            }
        });
        jtMaterial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtMaterialKeyPressed(evt);
            }
        });

        jtHeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtHeightFocusLost(evt);
            }
        });
        jtHeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtHeightKeyPressed(evt);
            }
        });

        jlMaterial.setText("Material");

        jtWeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtWeightFocusLost(evt);
            }
        });
        jtWeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtWeightKeyPressed(evt);
            }
        });

        jlWidth.setText("Largura(Pés)");

        jlHeight.setText("Altura(Pés)");

        jlWeight.setText("Peso(Kg)");

        jlpData.setLayer(jlModel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlColor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlType, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jtModel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jtColor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jrVela, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jrMotor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlImo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jtImo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jtWidth, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jtMaterial, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jtHeight, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlMaterial, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jtWeight, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlWidth, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlHeight, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlWeight, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlErrorImo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlErrorModel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlErrorColor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlErrorMaterial, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlErrorWidth, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlErrorHeight, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlErrorWeight, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlErrorType, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jlpDataLayout = new javax.swing.GroupLayout(jlpData);
        jlpData.setLayout(jlpDataLayout);
        jlpDataLayout.setHorizontalGroup(
            jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jlpDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jlpDataLayout.createSequentialGroup()
                        .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlMaterial)
                            .addComponent(jlImo)
                            .addComponent(jlModel)
                            .addComponent(jlColor))
                        .addGap(30, 30, 30)
                        .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jtColor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                                .addComponent(jtModel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jtImo, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jtMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jlpDataLayout.createSequentialGroup()
                        .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlWidth)
                            .addComponent(jlHeight)
                            .addComponent(jlWeight)
                            .addComponent(jlType))
                        .addGap(6, 6, 6)
                        .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jlpDataLayout.createSequentialGroup()
                                .addComponent(jrVela)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jrMotor))
                            .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jtWeight, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                                .addComponent(jtHeight, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jtWidth, javax.swing.GroupLayout.Alignment.TRAILING)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jlpDataLayout.createSequentialGroup()
                        .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlErrorColor)
                            .addComponent(jlErrorImo)
                            .addComponent(jlErrorModel)
                            .addComponent(jlErrorMaterial))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jlpDataLayout.createSequentialGroup()
                        .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlErrorWidth)
                            .addComponent(jlErrorHeight)
                            .addComponent(jlErrorWeight)
                            .addComponent(jlErrorType))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jlpDataLayout.setVerticalGroup(
            jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jlpDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlImo)
                    .addComponent(jtImo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlErrorImo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlModel)
                    .addComponent(jtModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlErrorModel))
                .addGap(12, 12, 12)
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlColor)
                    .addComponent(jtColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlErrorColor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlMaterial)
                    .addComponent(jlErrorMaterial))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlWidth)
                    .addComponent(jtWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlErrorWidth))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlHeight)
                    .addComponent(jlErrorHeight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlWeight)
                    .addComponent(jlErrorWeight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlType)
                    .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jrVela)
                        .addComponent(jrMotor)
                        .addComponent(jlErrorType)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jlpActions.setBorder(new javax.swing.border.MatteBorder(null));

        jbRegister.setText("Cadastrar");
        jbRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRegisterActionPerformed(evt);
            }
        });

        jbClear.setText("Limpar");
        jbClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbClearActionPerformed(evt);
            }
        });

        jlpActions.setLayer(jbRegister, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpActions.setLayer(jbClear, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpActions.setLayer(jlIcon, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jlpActionsLayout = new javax.swing.GroupLayout(jlpActions);
        jlpActions.setLayout(jlpActionsLayout);
        jlpActionsLayout.setHorizontalGroup(
            jlpActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jlpActionsLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jbRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbClear, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jlIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
        );
        jlpActionsLayout.setVerticalGroup(
            jlpActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jlpActionsLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jlpActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbClear)
                    .addComponent(jbRegister))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jlpActionsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlpActions, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jlpData)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlpData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlpActions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void register() {
        try {
            if(jtImo.getText().isEmpty()) {
                throw new Exception("Imo Inválido");
            } else if(jtModel.getText().isEmpty()) {
                throw new NumberFormatException("Modelo inválido");
            } else if(bgType.getSelection().getActionCommand() == null) {
                throw new NumberFormatException("Tipo inválido");
            } else if(jtMaterial.getText().isEmpty()){
                throw new NumberFormatException("Material inválido");
            } else if(jtWidth.getText().isEmpty()) {
                throw new Exception("Largura inválida");
            } else if(jtHeight.getText().isEmpty()) {
                throw new Exception("Altura inválida");
            } else if(jtWeight.getText().isEmpty()) {
                throw new Exception("Peso inválido");
            } else if(jtColor.getText().isEmpty()) {
                throw new NumberFormatException("Cor inválida");
            }
            
            Yacht yacht = new Yacht();
            yacht.setImo(Integer.parseInt(jtImo.getText()));
            yacht.setModel(jtModel.getText());
            yacht.setColor(jtColor.getText());
            yacht.setType(bgType.getSelection().getActionCommand());
            yacht.setMaterial(jtMaterial.getText());
            yacht.setWidth(Double.parseDouble(jtWidth.getText()));
            yacht.setHeight(Double.parseDouble(jtHeight.getText()));
            yacht.setWeight(Double.parseDouble(jtWeight.getText()));
            
            YachtServices yachtServices = ServicesFactory.getYachtServices();
            yachtServices.addYacht(yacht);
            
            JOptionPane.showMessageDialog(this, 
                    "Iate cadastrado com sucesso!");
            jlIcon.setIcon(
                new ImageIcon(
                    getClass().getResource(
                        "/br/edu/qi/images/yacht.png")));
        } catch (Exception exception) {
            JOptionPane.showMessageDialog(this, 
                    "Erro! " + exception.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
            jlIcon.setIcon(
                new ImageIcon(
                    getClass().getResource(
                        "/br/edu/qi/images/notyacht.png")));
        }
    }
    
    private void clear() {
        jtImo.setText("");
        jtModel.setText("");
        jtColor.setText("");
        bgType.clearSelection();
        jtMaterial.setText("");
        jtWidth.setText("");
        jtHeight.setText("");
        jtWeight.setText("");
        jtImo.setBorder(BorderFactory.createLineBorder(Color.lightGray));
        jlErrorImo.setText("");
        jlErrorImo.setVisible(false);
        jtModel.setBorder(BorderFactory.createLineBorder(Color.lightGray));
        jlErrorModel.setText("");
        jlErrorModel.setVisible(false);
        jtColor.setBorder(BorderFactory.createLineBorder(Color.lightGray));
        jlErrorColor.setText("");
        jlErrorColor.setVisible(false);
        jlErrorType.setText("");
        jlErrorType.setVisible(false);
        jtMaterial.setBorder(BorderFactory.createLineBorder(Color.lightGray));
        jlErrorMaterial.setText("");
        jlErrorMaterial.setVisible(false);
        jtWidth.setBorder(BorderFactory.createLineBorder(Color.lightGray));
        jlErrorWidth.setText("");
        jlErrorWidth.setVisible(false);
        jtHeight.setBorder(BorderFactory.createLineBorder(Color.lightGray));
        jlErrorHeight.setText("");
        jlErrorHeight.setVisible(false);
        jtWeight.setBorder(BorderFactory.createLineBorder(Color.lightGray));
        jlErrorWeight.setText("");
        jlErrorWeight.setVisible(false);
        jtImo.grabFocus();
    }
    
    private void jbRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRegisterActionPerformed
        register();
        clear();
        jtImo.grabFocus();
    }//GEN-LAST:event_jbRegisterActionPerformed

    private void jbClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbClearActionPerformed
        clear();
    }//GEN-LAST:event_jbClearActionPerformed

    private void jtWeightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtWeightKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            register();
            jtImo.grabFocus();
        }
    }//GEN-LAST:event_jtWeightKeyPressed

    private void jtWeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtWeightFocusLost
        if(!Validation.validateWeight(jtWeight.getText())) {
            jtWeight.setBorder(BorderFactory.createLineBorder(Color.red));
            jlErrorWeight.setText("Peso inválido");
            jlErrorWeight.setVisible(true);
        } else {
            jtWeight.setBorder(BorderFactory.createLineBorder(Color.green));
            jlErrorWeight.setText("");
            jlErrorWeight.setVisible(false);
        }
    }//GEN-LAST:event_jtWeightFocusLost

    private void jtHeightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtHeightKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jtWeight.grabFocus();
        }
    }//GEN-LAST:event_jtHeightKeyPressed

    private void jtHeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtHeightFocusLost
        if(!Validation.validateHeight(jtHeight.getText())) {
            jtHeight.setBorder(BorderFactory.createLineBorder(Color.red));
            jlErrorHeight.setText("Altura inválida");
            jlErrorHeight.setVisible(true);
        } else {
            jtHeight.setBorder(BorderFactory.createLineBorder(Color.green));
            jlErrorHeight.setText("");
            jlErrorHeight.setVisible(false);
        }
    }//GEN-LAST:event_jtHeightFocusLost

    private void jtMaterialKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtMaterialKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jtWidth.grabFocus();
        }
    }//GEN-LAST:event_jtMaterialKeyPressed

    private void jtMaterialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtMaterialFocusLost
        if(!Validation.validateMaterial(jtMaterial.getText())) {
            jtMaterial.setBorder(BorderFactory.createLineBorder(Color.red));
            jlErrorMaterial.setText("Material inválido");
            jlErrorMaterial.setVisible(true);
        } else {
            jtMaterial.setBorder(BorderFactory.createLineBorder(Color.green));
            jlErrorMaterial.setText("");
            jlErrorMaterial.setVisible(false);
        }
    }//GEN-LAST:event_jtMaterialFocusLost

    private void jtWidthKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtWidthKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jtHeight.grabFocus();
        }
    }//GEN-LAST:event_jtWidthKeyPressed

    private void jtWidthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtWidthFocusLost
        if(!Validation.validateWidth(jtWidth.getText())) {
            jtWidth.setBorder(BorderFactory.createLineBorder(Color.red));
            jlErrorWidth.setText("Largura inválida");
            jlErrorWidth.setVisible(true);
        } else {
            jtWidth.setBorder(BorderFactory.createLineBorder(Color.green));
            jlErrorWidth.setText("");
            jlErrorWidth.setVisible(false);
        }
    }//GEN-LAST:event_jtWidthFocusLost

    private void jtImoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtImoKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jtModel.grabFocus();
        }
    }//GEN-LAST:event_jtImoKeyPressed

    private void jtImoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtImoFocusLost
        if(!Validation.validateImo(jtImo.getText())) {
            jtImo.setBorder(BorderFactory.createLineBorder(Color.red));
            jlErrorImo.setText("Imo inválido");
            jlErrorImo.setVisible(true);
        } else {
            jtImo.setBorder(BorderFactory.createLineBorder(Color.green));
            jlErrorImo.setText("");
            jlErrorImo.setVisible(false);
        }
    }//GEN-LAST:event_jtImoFocusLost

    private void jrMotorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jrMotorKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jtMaterial.grabFocus();
        }
    }//GEN-LAST:event_jrMotorKeyPressed

    private void jrMotorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jrMotorFocusLost
        if(bgType.getSelection() == null) {
            jlErrorType.setText("Tipo inválido");
            jlErrorType.setVisible(true);
        } else {
            jlErrorType.setText("");
            jlErrorType.setVisible(false);
        }
    }//GEN-LAST:event_jrMotorFocusLost

    private void jtColorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtColorKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jrVela.grabFocus();
        }
    }//GEN-LAST:event_jtColorKeyPressed

    private void jtColorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtColorFocusLost
        if(!Validation.validateColor(jtColor.getText())) {
            jtColor.setBorder(BorderFactory.createLineBorder(Color.red));
            jlErrorColor.setText("Cor inválida");
            jlErrorColor.setVisible(true);
        } else {
            jtColor.setBorder(BorderFactory.createLineBorder(Color.green));
            jlErrorColor.setText("");
            jlErrorColor.setVisible(false);
        }
    }//GEN-LAST:event_jtColorFocusLost

    private void jtModelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtModelKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jtColor.grabFocus();
        }
    }//GEN-LAST:event_jtModelKeyPressed

    private void jtModelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtModelFocusLost
        if(!Validation.validateModel(jtModel.getText())) {
            jtModel.setBorder(BorderFactory.createLineBorder(Color.red));
            jlErrorModel.setText("Modelo inválido");
            jlErrorModel.setVisible(true);
        } else {
            jtModel.setBorder(BorderFactory.createLineBorder(Color.green));
            jlErrorModel.setText("");
            jlErrorModel.setVisible(false);
        }
    }//GEN-LAST:event_jtModelFocusLost

    private void jrVelaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jrVelaKeyPressed
        jrMotor.grabFocus();
    }//GEN-LAST:event_jrVelaKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgType;
    private javax.swing.JButton jbClear;
    private javax.swing.JButton jbRegister;
    private javax.swing.JLabel jlColor;
    private javax.swing.JLabel jlErrorColor;
    private javax.swing.JLabel jlErrorHeight;
    private javax.swing.JLabel jlErrorImo;
    private javax.swing.JLabel jlErrorMaterial;
    private javax.swing.JLabel jlErrorModel;
    private javax.swing.JLabel jlErrorType;
    private javax.swing.JLabel jlErrorWeight;
    private javax.swing.JLabel jlErrorWidth;
    private javax.swing.JLabel jlHeight;
    private javax.swing.JLabel jlIcon;
    private javax.swing.JLabel jlImo;
    private javax.swing.JLabel jlMaterial;
    private javax.swing.JLabel jlModel;
    private javax.swing.JLabel jlType;
    private javax.swing.JLabel jlWeight;
    private javax.swing.JLabel jlWidth;
    private javax.swing.JLayeredPane jlpActions;
    private javax.swing.JLayeredPane jlpData;
    private javax.swing.JRadioButton jrMotor;
    private javax.swing.JRadioButton jrVela;
    private javax.swing.JTextField jtColor;
    private javax.swing.JTextField jtHeight;
    private javax.swing.JTextField jtImo;
    private javax.swing.JTextField jtMaterial;
    private javax.swing.JTextField jtModel;
    private javax.swing.JTextField jtWeight;
    private javax.swing.JTextField jtWidth;
    // End of variables declaration//GEN-END:variables
}
